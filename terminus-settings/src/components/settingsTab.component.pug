button.btn.btn-outline-warning.btn-block(*ngIf='config.restartRequested', '(click)'='restartApp()') Restart the app to apply changes

ngb-tabset.vertical(type='tabs', [activeId]='activeTab')
    ngb-tab(id='application')
        ng-template(ngbTabTitle)
            | Application
        ng-template(ngbTabContent)
            h3.mb-3 Application
            .row
                .col.col-lg-6
                    .form-group
                        label Theme
                        select.form-control(
                            '[(ngModel)]'='config.store.appearance.theme',
                            (ngModelChange)='config.save()',
                        )
                            option(*ngFor='let theme of themes', [ngValue]='theme.name') {{theme.name}}

                    .form-group
                        label Show tabs
                        br
                        .btn-group(
                            '[(ngModel)]'='config.store.appearance.tabsLocation',
                            (ngModelChange)='config.save()',
                            ngbRadioGroup
                        )
                            label.btn.btn-secondary(ngbButtonLabel)
                                input(
                                    type='radio',
                                    ngbButton,
                                    [value]='"top"'
                                )
                                | On the top
                            label.btn.btn-secondary(ngbButtonLabel)
                                input(
                                    type='radio',
                                    ngbButton,
                                    [value]='"bottom"'
                                )
                                | At the bottom

                    .form-group(*ngIf='hostApp.platform === Platform.macOS')
                        label Vibrancy
                        br
                        .btn-group(
                            '[(ngModel)]'='config.store.appearance.vibrancy'
                            '(ngModelChange)'='config.save()'
                            ngbRadioGroup
                        )
                            label.btn.btn-secondary(ngbButtonLabel)
                                input(
                                    type='radio',
                                    ngbButton,
                                    [value]='true'
                                )
                                | Enable
                            label.btn.btn-secondary(ngbButtonLabel)
                                input(
                                    type='radio',
                                    ngbButton,
                                    [value]='false'
                                )
                                | Disable

                    .form-group(*ngIf='hostApp.platform !== Platform.Linux')
                        label Opacity
                        br
                        input(
                            type='range',
                            '[(ngModel)]'='config.store.appearance.opacity',
                            '(ngModelChange)'='config.save()',
                            min='0.05',
                            max='1',
                            step='0.01'
                        )                

                .col.col-lg-6
                    .form-group
                        label Window frame
                        br
                        .btn-group(
                            '[(ngModel)]'='config.store.appearance.frame'
                            '(ngModelChange)'='config.save(); config.requestRestart()'
                            ngbRadioGroup
                        )
                            label.btn.btn-secondary(ngbButtonLabel)
                                input(
                                    type='radio',
                                    ngbButton,
                                    [value]='"native"'
                                )
                                | Native
                            label.btn.btn-secondary(ngbButtonLabel)
                                input(
                                    type='radio',
                                    ngbButton,
                                    [value]='"thin"'
                                )
                                | Thin
                            label.btn.btn-secondary(ngbButtonLabel)
                                input(
                                    type='radio',
                                    ngbButton,
                                    [value]='"full"'
                                )
                                | Full
                        small.form-text.text-muted Whether a custom window or an OS native window should be used

                    .row
                        .col.col-auto
                            .form-group
                                label Dock the terminal
                                br
                                .btn-group(
                                    '[(ngModel)]'='config.store.appearance.dock'
                                    '(ngModelChange)'='config.save(); docking.dock()'
                                    ngbRadioGroup
                                )
                                    label.btn.btn-secondary(ngbButtonLabel)
                                        input(
                                            type='radio',
                                            ngbButton,
                                            [value]='"off"'
                                        )
                                        | Off
                                    label.btn.btn-secondary(ngbButtonLabel)
                                        input(
                                            type='radio',
                                            ngbButton,
                                            [value]='"top"'
                                        )
                                        | Top
                                    label.btn.btn-secondary(ngbButtonLabel)
                                        input(
                                            type='radio',
                                            ngbButton,
                                            [value]='"left"'
                                        )
                                        | Left
                                    label.btn.btn-secondary(ngbButtonLabel)
                                        input(
                                            type='radio',
                                            ngbButton,
                                            [value]='"right"'
                                        )
                                        | Right
                                    label.btn.btn-secondary(ngbButtonLabel)
                                        input(
                                            type='radio',
                                            ngbButton,
                                            [value]='"bottom"'
                                        )
                                        | Bottom

                            .form-group(*ngIf='config.store.appearance.dock != "off"')
                                label Display on
                                br
                                div(
                                    [(ngModel)]='config.store.appearance.dockScreen',
                                    (ngModelChange)='config.save(); docking.dock()',
                                    ngbRadioGroup
                                )
                                    label.btn.btn-secondary(ngbButtonLabel)
                                        input(
                                            type='radio',
                                            ngbButton,
                                            value='current'
                                        )
                                        | Current
                                    label.btn.btn-secondary(*ngFor='let screen of screens', ngbButtonLabel)
                                        input(
                                            type='radio',
                                            ngbButton,
                                            [value]='screen.id'
                                        )
                                        | {{screen.name}}
                        .col.col-auto
                            .form-group(*ngIf='config.store.appearance.dock != "off"')
                                label Docked terminal size
                                br
                                input(
                                    type='range',
                                    '[(ngModel)]'='config.store.appearance.dockFill',
                                    '(mouseup)'='config.save(); docking.dock()',
                                    min='0.05',
                                    max='1',
                                    step='0.01'
                                )

                    .form-group
                        label Debugging
                        div
                            button.btn.btn-secondary((click)='hostApp.openDevTools()')
                                i.fa.fa-bug
                                span Open DevTools

            .form-group
                label Custom CSS
                textarea.form-control(
                    [(ngModel)]='config.store.appearance.css',
                    '(ngModelChange)'='config.save()',
                )
                    
    ngb-tab(id='hotkeys')
        ng-template(ngbTabTitle)
            | Hotkeys
        ng-template(ngbTabContent)
            h3.mb-3 Hotkeys
            input.form-control(type='search', placeholder='Search hotkeys', [(ngModel)]='hotkeyFilter')
            .form-group
                table.hotkeys-table
                    tr
                        th Name
                        th ID
                        th Hotkey 
                    tr(*ngFor='let hotkey of hotkeyDescriptions|filterBy:["name"]:hotkeyFilter')
                        td {{hotkey.name}}
                        td {{hotkey.id}}
                        td
                            multi-hotkey-input(
                                '[(model)]'='config.store.hotkeys[hotkey.id]'
                                '(modelChange)'='config.save(); docking.dock()'
                            )
                    
    ngb-tab(*ngFor='let provider of settingsProviders', [id]='provider.id')
        ng-template(ngbTabTitle)
            | {{provider.title}}
        ng-template(ngbTabContent)
            settings-tab-body([provider]='provider')
